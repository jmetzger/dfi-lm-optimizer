import BigNumber from 'bignumber.js';
import { LosslessNumber } from 'lossless-json';
import { PrecisionPath } from './remap';
export { BigNumber, LosslessNumber, PrecisionPath };
/**
 * Numeric precision to parse RPC payload as.
 *
 * 'lossless' uses LosslessJSON that parses numeric values as LosslessNumber. With LosslessNumber, one can perform
 * regular numeric operations, and it will throw an error when this would result in losing information.
 *
 * 'bignumber' parse all numeric values as 'BigNumber' using bignumber.js library.
 *
 * 'number' parse all numeric values as 'Number' and precision will be loss if it exceeds IEEE-754 standard.
 */
export declare type Precision = 'lossless' | 'bignumber' | 'number';
/**
 * JellyfishJSON allows parsing of JSON with 'lossless', 'bignumber' and 'number' numeric precision.
 */
export declare const JellyfishJSON: {
    /**
     * Precision parses all numeric value as the given Precision.
     *
     * PrecisionPath selectively remap each numeric value based on the mapping provided,
     * defaults to number if precision is not provided for the key. This works deeply.
     *
     * @param {string} text JSON string to parse into object.
     * @param {Precision | PrecisionPath} precision Numeric precision to parse payload as.
     */
    parse(text: string, precision: Precision | PrecisionPath): any;
    /**
     * @param {any} value object to stringify, with no risk of losing precision.
     */
    stringify(value: any): string;
};
//# sourceMappingURL=index.d.ts.map