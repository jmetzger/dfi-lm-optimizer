"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remap = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const lossless_json_1 = require("lossless-json");
/**
 * @param {any} losslessObj to deeply remap into bignumber or number.
 * @param {'bignumber' | PrecisionPath} precision path mapping
 */
function remap(losslessObj, precision) {
    return deepRemap(losslessObj, precision);
}
exports.remap = remap;
/**
 * @param {any} losslessObj to deeply remap
 * @param {'bignumber' | PrecisionPath} precision path mapping
 */
function deepRemap(losslessObj, precision) {
    if (losslessObj === null || losslessObj === undefined) {
        return losslessObj;
    }
    if (typeof precision !== 'object') {
        return reviveAs(losslessObj, precision);
    }
    if (Array.isArray(losslessObj)) {
        return losslessObj.map(obj => deepRemap(obj, precision));
    }
    if (losslessObj instanceof lossless_json_1.LosslessNumber) {
        return reviveLosslessAs(losslessObj);
    }
    for (const [key, value] of Object.entries(losslessObj)) {
        losslessObj[key] = deepRemap(value, precision[key]);
    }
    return losslessObj;
}
/**
 * Array will deeply remapped, object keys will be iterated on as keys.
 *
 * @param {any} losslessObj to revive
 * @param precision to use, specific 'bignumber' for BigNumber or values always ignored and default to number
 */
function reviveAs(losslessObj, precision) {
    if (losslessObj === null || losslessObj === undefined) {
        return losslessObj;
    }
    if (losslessObj instanceof lossless_json_1.LosslessNumber) {
        return reviveLosslessAs(losslessObj, precision);
    }
    if (Array.isArray(losslessObj)) {
        return losslessObj.map((v) => reviveAs(v, precision));
    }
    if (typeof losslessObj === 'object') {
        for (const [key, value] of Object.entries(losslessObj)) {
            losslessObj[key] = reviveAs(value, precision);
        }
    }
    return losslessObj;
}
/**
 * @param {LosslessNumber} losslessNum to revive as bignumber or number if precision != bignumber
 * @param {Precision} precision to use, specific 'bignumber' for BigNumber else always default to number
 */
function reviveLosslessAs(losslessNum, precision) {
    if (precision === 'lossless') {
        return losslessNum;
    }
    if (precision === 'bignumber') {
        return new bignumber_js_1.default(losslessNum.toString());
    }
    return Number(losslessNum.toString());
}
//# sourceMappingURL=remap.js.map