"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Governance = exports.MasternodeType = exports.VoteDecision = exports.ListProposalsStatus = exports.ListProposalsType = exports.ProposalStatus = exports.ProposalType = void 0;
var ProposalType;
(function (ProposalType) {
    ProposalType["COMMUNITY_FUND_REQUEST"] = "CommunityFundRequest";
    ProposalType["BLOCK_REWARD_RELLOCATION"] = "BlockRewardRellocation";
    ProposalType["VOTE_OF_CONFIDENCE"] = "VoteOfConfidence";
})(ProposalType = exports.ProposalType || (exports.ProposalType = {}));
var ProposalStatus;
(function (ProposalStatus) {
    ProposalStatus["VOTING"] = "Voting";
    ProposalStatus["REJECTED"] = "Rejected";
    ProposalStatus["COMPLETED"] = "Completed";
})(ProposalStatus = exports.ProposalStatus || (exports.ProposalStatus = {}));
var ListProposalsType;
(function (ListProposalsType) {
    ListProposalsType["CFP"] = "cfp";
    ListProposalsType["BRP"] = "brp";
    ListProposalsType["VOC"] = "voc";
    ListProposalsType["ALL"] = "all";
})(ListProposalsType = exports.ListProposalsType || (exports.ListProposalsType = {}));
var ListProposalsStatus;
(function (ListProposalsStatus) {
    ListProposalsStatus["VOTING"] = "voting";
    ListProposalsStatus["REJECTED"] = "rejected";
    ListProposalsStatus["COMPLETED"] = "completed";
    ListProposalsStatus["ALL"] = "all";
})(ListProposalsStatus = exports.ListProposalsStatus || (exports.ListProposalsStatus = {}));
var VoteDecision;
(function (VoteDecision) {
    VoteDecision["YES"] = "yes";
    VoteDecision["NO"] = "no";
    VoteDecision["NEUTRAL"] = "neutral";
})(VoteDecision = exports.VoteDecision || (exports.VoteDecision = {}));
var MasternodeType;
(function (MasternodeType) {
    MasternodeType["MINE"] = "mine";
    MasternodeType["ALL"] = "all";
})(MasternodeType = exports.MasternodeType || (exports.MasternodeType = {}));
/**
 * Governance RPCs for DeFi Blockchain
 */
class Governance {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a Community Fund Request.
     *
     * @param {CFPData} data Community fund proposal data
     * @param {string} data.title Title of community fund request
     * @param {BigNumber} data.amount Amount per period
     * @param {string} data.payoutAddress Any valid address to receive the funds
     * @param {number} [data.cycles=1] Number of cycles for periodic fund request. Defaults to one cycle.
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} [utxos.txid] The transaction id
     * @param {number} [utxos.vout] The output number
     * @return {Promise<string>} txid
     */
    createCfp(data, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultData = {
                cycles: 1
            };
            return yield this.client.call('createcfp', [Object.assign(Object.assign({}, defaultData), data), utxos], 'number');
        });
    }
    /**
     * Returns information about the proposal.
     *
     * @param {string} proposalId Proposal id
     * @return {Promise<ProposalInfo>} Information about the proposal
     */
    getProposal(proposalId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getproposal', [proposalId], { amount: 'bignumber' });
        });
    }
    /**
     * Creates a Vote of Confidence.
     *
     * @param {string} title Vote of confidence's title
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} [utxos.txid] The transaction id
     * @param {number} [utxos.vout] The output number
     * @return {Promise<string>} txid
     */
    createVoc(title, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('createvoc', [title, utxos], 'number');
        });
    }
    /**
     * Returns list of proposals.
     *
     * @param {Object} options List proposal filter options
     * @param {ListProposalsType} [options.type=ListProposalsType.ALL] type of proposals
     * @param {ListProposalsStatus} [options.status=ListProposalsStatus.ALL] status of proposals
     * @return {Promise<ProposalInfo[]>}
     */
    listProposals({ type = ListProposalsType.ALL, status = ListProposalsStatus.ALL } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listproposals', [type, status], { amount: 'bignumber' });
        });
    }
    /**
     * Vote on a community proposal.
     *
     * @param {VoteData} data Vote data
     * @param {string} data.proposalId Proposal id
     * @param {number} data.masternodeId Masternode id
     * @param {VoteDecision} data.decision Vote decision. See VoteDecision.
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} [utxos.txid] The transaction id
     * @param {string} [utxos.vout] The output number
     * @return {Promise<string>} txid
     */
    vote(data, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('vote', [data.proposalId, data.masternodeId, data.decision, utxos], 'number');
        });
    }
    /**
     * Returns information about proposal votes.
     *
     * @param {string} proposalId Proposal id
     * @param {MasternodeType | string} [masternode=MasternodeType.MINE] masternode id or reserved words 'mine' to list votes for all owned accounts or 'all' to list all votes
     * @return {Promise<ListVotesResult[]>} Proposal vote information
     */
    listVotes(proposalId, masternode = MasternodeType.MINE) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listvotes', [proposalId, masternode], 'number');
        });
    }
}
exports.Governance = Governance;
//# sourceMappingURL=governance.js.map