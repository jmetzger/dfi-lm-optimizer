"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolPair = void 0;
/**
 * PoolPair RPCs for DeFi Blockchain
 */
class PoolPair {
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a poolpair with given metadata
     *
     * @param {CreatePoolPairMetadata} metadata a data providing information for pool pair creation
     * @param {string} metadata.tokenA uses to trade to obtain tokenB
     * @param {string} metadata.tokenB
     * @param {number} metadata.commission
     * @param {boolean} metadata.status
     * @param {string} metadata.ownerAddress
     * @param {string} [metadata.customRewards]
     * @param {string} [metadata.pairSymbol]
     * @param {UTXO[]} utxos is an array of specific UTXOs to spend
     * @param {string} utxos.txid
     * @param {number} utxos.vout
     * @return {Promise<string>}
     */
    createPoolPair(metadata, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('createpoolpair', [metadata, utxos], 'number');
        });
    }
    /**
     * Returns information about pools
     *
     * @param {PoolPairPagination} pagination
     * @param {number} pagination.start default is 0
     * @param {boolean} pagination.including_start default = true
     * @param {number} pagination.limit to limit number of records
     * @param {boolean} verbose default = true, otherwise only symbol, name, status, idTokenA, idTokenB
     * @return {Promise<PoolPairsResult>}
     */
    listPoolPairs(pagination = {
        start: 0,
        including_start: true,
        limit: 100
    }, verbose = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listpoolpairs', [pagination, verbose], 'bignumber');
        });
    }
    /**
     * Returns information about pool
     *
     * @param {string} symbol token's symbol
     * @param {boolean} verbose default = true, otherwise only symbol, name, status, idTokenA, idTokenB
     * @return {Promise<PoolPairsResult>}
     */
    getPoolPair(symbol, verbose = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getpoolpair', [symbol, verbose], 'bignumber');
        });
    }
    /**
     * Add pool liquidity transaction
     *
     * @param {AddPoolLiquiditySource} from pool liquidity sources
     * @param {string | string[]} from[address] provides at least two types of token with format 'amoun@token'
     * @param {string} shareAddress defi address for crediting tokens
     * @param {PoolLiquidityOptions} [options]
     * @param {AddPoolLiquidityUTXO[]} [options.utxos] utxos array of specific UTXOs to spend
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>}
     */
    addPoolLiquidity(from, shareAddress, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { utxos } = options;
            return yield this.client.call('addpoolliquidity', [from, shareAddress, utxos], 'bignumber');
        });
    }
    /**
     * Returns information about pool shares
     *
     * @param {PoolPairPagination} pagination
     * @param {number} pagination.start default is 0
     * @param {boolean} pagination.including_start default = true
     * @param {number} pagination.limit to limit number of records
     * @param {boolean} verbose default = true, otherwise only poolID, owner and %
     * @param {PoolShareOptions} [options]
     * @param {boolean} [options.isMineOnly=true]
     * @return {Promise<PoolSharesResult>}
     */
    listPoolShares(pagination = {
        start: 0,
        including_start: true,
        limit: 100
    }, verbose = true, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { isMineOnly = true } = options;
            return yield this.client.call('listpoolshares', [pagination, verbose, isMineOnly], 'bignumber');
        });
    }
    /**
     *  Creates a pool swap transaction with given metadata
     *
     * @param {PoolSwapMetadata} metadata a provided information to create pool swap transaction
     * @param {string} metadata.from address of the owner of tokenFrom
     * @param {string} metadata.tokenFrom swap from token {symbol/id}
     * @param {number} metadata.amountFrom amount from tokenA
     * @param {to} metadata.to address of the owner of tokenTo
     * @param {tokenTo} metadata.tokenTo swap to token {symbol/id}
     * @param {maxPrice} [metadata.maxPrice] acceptable max price
     * @param {UTXO[]} [utxos = []] array for utxos to spend from.
     * @param {string} [utxos.txid] the transaction id.
     * @param {number} [utxos.vout] the output number.
     * @return {Promise<string>}  hex of performed transaction
     */
    poolSwap(metadata, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('poolswap', [metadata, utxos], 'bignumber');
        });
    }
    /**
     * Create a test pool swap transaction to check pool swap's return result
     *
     * @param {PoolSwapMetadata} metadata a provided information to create test pool swap transaction
     * @param {string} metadata.from address of the owner of tokenFrom
     * @param {string} metadata.tokenFrom swap from token {symbol/id}
     * @param {number} metadata.amountFrom amount from tokenA
     * @param {to} metadata.to address of the owner of tokenTo
     * @param {tokenTo} metadata.tokenTo swap to token {symbol/id}
     * @param {maxPrice} [metadata.maxPrice] acceptable max price
     * @return {Promise<string>} formatted as 'amount@token' swapped
     */
    testPoolSwap(metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('testpoolswap', [metadata], 'bignumber');
        });
    }
    /**
     * Remove pool liquidity transaction
     *
     * @param {string} address defi address for crediting tokens
     * @param {string} poolAccount pool liquidity account of owner
     * @param {PoolLiquidityOptions} [options]
     * @param {UTXO[]} [options.utxos] utxos array of specific UTXOs to spend
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>}
     */
    removePoolLiquidity(address, poolAccount, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { utxos } = options;
            return yield this.client.call('removepoolliquidity', [address, poolAccount, utxos], 'bignumber');
        });
    }
}
exports.PoolPair = PoolPair;
//# sourceMappingURL=poolpair.js.map