import { ApiClient } from '../.';
import BigNumber from 'bignumber.js';
export declare enum OracleRawPriceState {
    LIVE = "live",
    EXPIRED = "expired"
}
/**
 * Oracle RPCs for DeFi Blockchain
 */
export declare class Oracle {
    private readonly client;
    constructor(client: ApiClient);
    /**
     * Creates a price oracle for rely of real time price data.
     *
     * @param {string} address
     * @param {OraclePriceFeed[]} priceFeeds
     * @param {AppointOracleOptions} [options]
     * @param {number} options.weightage
     * @param {UTXO[]} [options.utxos = []]
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>} oracleId, also the txn id for txn created to appoint oracle
     */
    appointOracle(address: string, priceFeeds: OraclePriceFeed[], options?: AppointOracleOptions): Promise<string>;
    /**
     * Removes oracle.
     *
     * @param {string} oracleId
     * @param {UTXO[]} [utxos = []]
     * @param {string} [utxos.txid]
     * @param {number} [utxos.vout]
     * @return {Promise<string>} txid
     */
    removeOracle(oracleId: string, utxos?: UTXO[]): Promise<string>;
    /**
     * Update a price oracle for rely of real time price data.
     *
     * @param {string} oracleId
     * @param {string} address
     * @param {UpdateOracleOptions} [options]
     * @param {OraclePriceFeed[]} options.priceFeeds
     * @param {number} options.weightage
     * @param {UTXO[]} [options.utxos = []]
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>} txid
     */
    updateOracle(oracleId: string, address: string, options?: UpdateOracleOptions): Promise<string>;
    /**
     * Set oracle data transaction.
     *
     * @param {string} oracleId
     * @param {number} timestamp timestamp in seconds
     * @param {SetOracleDataOptions} [options]
     * @param {OraclePrice[]} options.prices
     * @param {UTXO[]} [options.utxos = []]
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>} txid
     */
    setOracleData(oracleId: string, timestamp: number, options?: SetOracleDataOptions): Promise<string>;
    /**
     * Returns oracle data.
     *
     * @param {string} oracleId
     * @return {Promise<OracleData>}
     */
    getOracleData(oracleId: string): Promise<OracleData>;
    /**
     * Returns array of oracle ids.
     *
     * @return {Promise<string[]>}
     */
    listOracles(): Promise<string[]>;
    /**
     * Returns latest raw price updates from oracles.
     *
     * @param {OraclePriceFeed} [priceFeed]
     * @return {Promise<OracleRawPrice[]>}
     */
    listLatestRawPrices(priceFeed?: OraclePriceFeed): Promise<OracleRawPrice[]>;
    /**
     * Returns aggregated price from oracles.
     *
     * @param {OraclePriceFeed} priceFeed
     * @return {Promise<BigNumber>}
     */
    getPrice(priceFeed: OraclePriceFeed): Promise<BigNumber>;
    /**
     * List all aggregated prices.
     *
     * @return {Promise<ListPricesData[]>}
     */
    listPrices(): Promise<ListPricesData[]>;
}
export interface AppointOracleOptions {
    weightage?: number;
    utxos?: UTXO[];
}
export interface UpdateOracleOptions {
    priceFeeds?: OraclePriceFeed[];
    weightage?: number;
    utxos?: UTXO[];
}
export interface SetOracleDataOptions {
    prices?: OraclePrice[];
    utxos?: UTXO[];
}
export interface OracleData {
    oracleid: string;
    address: string;
    priceFeeds: OraclePriceFeed[];
    tokenPrices: OracleTokenPrice[];
    weightage: number;
}
export interface OracleRawPrice {
    oracleid: string;
    priceFeeds: OraclePriceFeed;
    rawprice: BigNumber;
    weightage: BigNumber;
    state: OracleRawPriceState;
    timestamp: BigNumber;
}
export interface OraclePriceFeed {
    token: string;
    currency: string;
}
export interface OraclePrice {
    tokenAmount: string;
    currency: string;
}
export interface UTXO {
    txid: string;
    vout: number;
}
export interface OracleTokenPrice {
    token: string;
    currency: string;
    /**
     * @example 0.5
     */
    amount: number;
    /**
     * @example 1623161076 is an Epoch time which every digit represents a second.
     */
    timestamp: number;
}
export interface ListPricesData {
    token: string;
    currency: string;
    /**
     * @example new BigNumber(0.83333333000000)
     */
    price?: BigNumber;
    /**
     * @example true or display error msg if false
     */
    ok: boolean | string;
}
//# sourceMappingURL=oracle.d.ts.map