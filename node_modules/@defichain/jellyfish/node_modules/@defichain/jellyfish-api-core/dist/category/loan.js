"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loan = void 0;
/**
 * Loan RPCs for DeFi Blockchain
 */
class Loan {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a loan scheme transaction.
     *
     * @param {CreateLoanScheme} scheme
     * @param {number} scheme.minColRatio Minimum collateralization ratio
     * @param {BigNumber} scheme.interestRate Interest rate
     * @param {string} scheme.id Unique identifier of the loan scheme, max 8 chars
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} LoanSchemeId, also the txn id for txn created to create loan scheme
     */
    createLoanScheme(scheme, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('createloanscheme', [scheme.minColRatio, scheme.interestRate, scheme.id, utxos], 'number');
        });
    }
    /**
     * Updates an existing loan scheme.
     *
     * @param {UpdateLoanScheme} scheme
     * @param {number} scheme.minColRatio Minimum collateralization ratio
     * @param {BigNumber} scheme.interestRate Interest rate
     * @param {string} scheme.id Unique identifier of the loan scheme, max 8 chars
     * @param {number} [scheme.activateAfterBlock] Block height at which new changes take effect
     * @param {UTXO[]} [options.utxos = []] Specific UTXOs to spend
     * @param {string} options.utxos.txid Transaction Id
     * @param {number} options.utxos.vout Output number
     * @return {Promise<string>} Hex string of the transaction
     */
    updateLoanScheme(scheme, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('updateloanscheme', [scheme.minColRatio, scheme.interestRate, scheme.id, scheme.activateAfterBlock, utxos], 'number');
        });
    }
    /**
     * Destroys a loan scheme.
     *
     * @param {DestroyLoanScheme} scheme
     * @param {string} scheme.id Unique identifier of the loan scheme, max 8 chars
     * @param {number} [scheme.activateAfterBlock] Block height at which new changes take effect
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Hex string of the transaction
     */
    destroyLoanScheme(scheme, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('destroyloanscheme', [scheme.id, scheme.activateAfterBlock, utxos], 'number');
        });
    }
    /**
     * List all available loan schemes.
     *
     * @return {Promise<LoanSchemeResult[]>}
     */
    listLoanSchemes() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listloanschemes', [], 'bignumber');
        });
    }
    /**
     * Get loan scheme.
     *
     * @param {string} id Unique identifier of the loan scheme, max 8 chars.
     * @return {Promise<GetLoanSchemeResult>}
     */
    getLoanScheme(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getloanscheme', [id], 'bignumber');
        });
    }
    /**
     * Sets the default loan scheme.
     *
     * @param {string} id Unique identifier of the loan scheme, max 8 chars
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Hex string of the transaction
     */
    setDefaultLoanScheme(id, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('setdefaultloanscheme', [id, utxos], 'number');
        });
    }
    /**
     * Set a collateral token transaction.
     *
     * @param {SetCollateralToken} collateralToken
     * @param {string} collateralToken.token Symbol or id of collateral token
     * @param {BigNumber} collateralToken.factor Collateralization factor
     * @param {string} collateralToken.priceFeedId token/currency pair to use for price of token
     * @param {number} [collateralToken.activateAfterBlock] changes will be active after the block height
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} collateralTokenId, also the txn id for txn created to set collateral token
     */
    setCollateralToken(collateralToken, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('setcollateraltoken', [collateralToken, utxos], 'number');
        });
    }
    /**
     * List collateral tokens.
     *
     * @return {Promise<CollateralTokensData>} Get all collateral tokens
     */
    listCollateralTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listcollateraltokens', [], 'bignumber');
        });
    }
    /**
     * Get collateral token.
     *
     * @param {GetCollateralToken} [collateralToken = {}]
     * @param {string} [collateralToken.token] Symbol of collateral token
     * @param {number} [collateralToken.height = CurrentBlockheight] Valid at specified height
     * @return {Promise<CollateralTokenDetails>} Collateral token result
     */
    getCollateralToken(collateralToken = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getcollateraltoken', [collateralToken], 'bignumber');
        });
    }
    /**
     * Creates (and submits to local node and network) a token for a price feed set in collateral token.
     *
     * @param {SetLoanToken} loanToken
     * @param {string} loanToken.symbol Token's symbol (unique), no longer than 8
     * @param {string} [loanToken.name] Token's name, no longer than 128
     * @param {string} loanToken.priceFeedId token/currency pair to use for price of token
     * @param {boolean} [loanToken.mintable = true] Token's 'Mintable' property
     * @param {BigNumber} [loanToken.interest = 0] Interest rate
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} LoanTokenId, also the txn id for txn created to set loan token
     */
    setLoanToken(loanToken, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultData = {
                mintable: true,
                interest: 0
            };
            return yield this.client.call('setloantoken', [Object.assign(Object.assign({}, defaultData), loanToken), utxos], 'number');
        });
    }
    /**
     * Updates an existing loan token.
     *
     * @param {string} oldToken Previous tokens's symbol, id or creation tx (unique)
     * @param {UpdateLoanToken} newTokenDetails
     * @param {string} [newTokenDetails.symbol] New token's symbol (unique), no longer than 8
     * @param {string} [newTokenDetails.name] Token's name, no longer than 128
     * @param {string} [newTokenDetails.priceFeedId] token/currency pair to use for price of token
     * @param {boolean} [newTokenDetails.mintable] Token's 'Mintable' property
     * @param {BigNumber} [newTokenDetails.interest] Interest rate
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} LoanTokenId, also the txn id for txn created to update loan token
     */
    updateLoanToken(oldToken, newTokenDetails, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('updateloantoken', [oldToken, newTokenDetails, utxos], 'number');
        });
    }
    /**
     * List all created loan tokens.
     *
     * @return {Promise<ListLoanTokenResult[]>}
     */
    listLoanTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listloantokens', [], 'bignumber');
        });
    }
    /**
     * Creates a vault transaction.
     *
     * @param {CreateVault} vault
     * @param {string} vault.ownerAddress Any valid address or "" to generate a new address
     * @param {number} [vault.loanSchemeId] Unique identifier of the loan scheme (8 chars max). If empty, the default loan scheme will be selected
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Transaction id of the transaction
     */
    createVault(vault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('createvault', [vault.ownerAddress, vault.loanSchemeId, utxos], 'number');
        });
    }
    /**
     * Returns information about vault.
     *
     * @param {string} vaultId vault hex id
     * @return {Promise<VaultDetails>}
     */
    getVault(vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getvault', [vaultId], 'bignumber');
        });
    }
    /**
     * Deposit to vault
     *
     * @param {DepositVault} depositVault
     * @param {string} depositVault.vaultId Vault id
     * @param {string} depositVault.from Collateral address
     * @param {string} depositVault.amount In "amount@symbol" format
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>}
     */
    depositToVault(depositVault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('deposittovault', [depositVault.vaultId, depositVault.from, depositVault.amount, utxos], 'number');
        });
    }
    /**
     * Take loan
     *
     * @param {TakeLoanMetadata} metadata
     * @param {string} metadata.vaultId Vault id
     * @param {string} metadata.amounts In "amount@symbol" format
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>}
     */
    takeLoan(metadata, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('takeloan', [metadata, utxos], 'number');
        });
    }
}
exports.Loan = Loan;
//# sourceMappingURL=loan.js.map