"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oracle = exports.OracleRawPriceState = void 0;
var OracleRawPriceState;
(function (OracleRawPriceState) {
    OracleRawPriceState["LIVE"] = "live";
    OracleRawPriceState["EXPIRED"] = "expired";
})(OracleRawPriceState = exports.OracleRawPriceState || (exports.OracleRawPriceState = {}));
/**
 * Oracle RPCs for DeFi Blockchain
 */
class Oracle {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a price oracle for rely of real time price data.
     *
     * @param {string} address
     * @param {OraclePriceFeed[]} priceFeeds
     * @param {AppointOracleOptions} [options]
     * @param {number} options.weightage
     * @param {UTXO[]} [options.utxos = []]
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>} oracleId, also the txn id for txn created to appoint oracle
     */
    appointOracle(address, priceFeeds, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { utxos = [] } = options;
            return yield this.client.call('appointoracle', [address, priceFeeds, options.weightage, utxos], 'number');
        });
    }
    /**
     * Removes oracle.
     *
     * @param {string} oracleId
     * @param {UTXO[]} [utxos = []]
     * @param {string} [utxos.txid]
     * @param {number} [utxos.vout]
     * @return {Promise<string>} txid
     */
    removeOracle(oracleId, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('removeoracle', [oracleId, utxos], 'number');
        });
    }
    /**
     * Update a price oracle for rely of real time price data.
     *
     * @param {string} oracleId
     * @param {string} address
     * @param {UpdateOracleOptions} [options]
     * @param {OraclePriceFeed[]} options.priceFeeds
     * @param {number} options.weightage
     * @param {UTXO[]} [options.utxos = []]
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>} txid
     */
    updateOracle(oracleId, address, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { utxos = [] } = options;
            return yield this.client.call('updateoracle', [oracleId, address, options.priceFeeds, options.weightage, utxos], 'number');
        });
    }
    /**
     * Set oracle data transaction.
     *
     * @param {string} oracleId
     * @param {number} timestamp timestamp in seconds
     * @param {SetOracleDataOptions} [options]
     * @param {OraclePrice[]} options.prices
     * @param {UTXO[]} [options.utxos = []]
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>} txid
     */
    setOracleData(oracleId, timestamp, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { utxos = [] } = options;
            return yield this.client.call('setoracledata', [oracleId, timestamp, options.prices, utxos], 'number');
        });
    }
    /**
     * Returns oracle data.
     *
     * @param {string} oracleId
     * @return {Promise<OracleData>}
     */
    getOracleData(oracleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getoracledata', [oracleId], 'number');
        });
    }
    /**
     * Returns array of oracle ids.
     *
     * @return {Promise<string[]>}
     */
    listOracles() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listoracles', [], 'number');
        });
    }
    /**
     * Returns latest raw price updates from oracles.
     *
     * @param {OraclePriceFeed} [priceFeed]
     * @return {Promise<OracleRawPrice[]>}
     */
    listLatestRawPrices(priceFeed) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = priceFeed !== undefined && priceFeed !== null ? [priceFeed] : [];
            return yield this.client.call('listlatestrawprices', params, 'bignumber');
        });
    }
    /**
     * Returns aggregated price from oracles.
     *
     * @param {OraclePriceFeed} priceFeed
     * @return {Promise<BigNumber>}
     */
    getPrice(priceFeed) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getprice', [priceFeed], 'bignumber');
        });
    }
    /**
     * List all aggregated prices.
     *
     * @return {Promise<ListPricesData[]>}
     */
    listPrices() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listprices', [], 'bignumber');
        });
    }
}
exports.Oracle = Oracle;
//# sourceMappingURL=oracle.js.map