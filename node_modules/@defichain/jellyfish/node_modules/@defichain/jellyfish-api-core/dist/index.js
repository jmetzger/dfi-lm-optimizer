"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcApiError = exports.ClientApiError = exports.ApiError = exports.ApiClient = exports.loan = exports.misc = exports.icxorderbook = exports.spv = exports.governance = exports.masternode = exports.server = exports.oracle = exports.account = exports.token = exports.poolpair = exports.wallet = exports.rawtx = exports.net = exports.mining = exports.blockchain = void 0;
const blockchain_1 = require("./category/blockchain");
const mining_1 = require("./category/mining");
const net_1 = require("./category/net");
const rawtx_1 = require("./category/rawtx");
const wallet_1 = require("./category/wallet");
const account_1 = require("./category/account");
const poolpair_1 = require("./category/poolpair");
const token_1 = require("./category/token");
const oracle_1 = require("./category/oracle");
const server_1 = require("./category/server");
const masternode_1 = require("./category/masternode");
const icxorderbook_1 = require("./category/icxorderbook");
const governance_1 = require("./category/governance");
const spv_1 = require("./category/spv");
const misc_1 = require("./category/misc");
const loan_1 = require("./category/loan");
__exportStar(require("@defichain/jellyfish-json"), exports);
exports.blockchain = __importStar(require("./category/blockchain"));
exports.mining = __importStar(require("./category/mining"));
exports.net = __importStar(require("./category/net"));
exports.rawtx = __importStar(require("./category/rawtx"));
exports.wallet = __importStar(require("./category/wallet"));
exports.poolpair = __importStar(require("./category/poolpair"));
exports.token = __importStar(require("./category/token"));
exports.account = __importStar(require("./category/account"));
exports.oracle = __importStar(require("./category/oracle"));
exports.server = __importStar(require("./category/server"));
exports.masternode = __importStar(require("./category/masternode"));
exports.governance = __importStar(require("./category/governance"));
exports.spv = __importStar(require("./category/spv"));
exports.icxorderbook = __importStar(require("./category/icxorderbook"));
exports.misc = __importStar(require("./category/misc"));
exports.loan = __importStar(require("./category/loan"));
/**
 * A protocol agnostic DeFiChain node client, RPC calls are separated into their category.
 */
class ApiClient {
    constructor() {
        this.blockchain = new blockchain_1.Blockchain(this);
        this.mining = new mining_1.Mining(this);
        this.net = new net_1.Net(this);
        this.rawtx = new rawtx_1.RawTx(this);
        this.wallet = new wallet_1.Wallet(this);
        this.account = new account_1.Account(this);
        this.poolpair = new poolpair_1.PoolPair(this);
        this.token = new token_1.Token(this);
        this.oracle = new oracle_1.Oracle(this);
        this.server = new server_1.Server(this);
        this.masternode = new masternode_1.Masternode(this);
        this.icxorderbook = new icxorderbook_1.ICXOrderBook(this);
        this.governance = new governance_1.Governance(this);
        this.spv = new spv_1.Spv(this);
        this.misc = new misc_1.Misc(this);
        this.loan = new loan_1.Loan(this);
    }
}
exports.ApiClient = ApiClient;
/**
 * DeFi Blockchain errors are encapsulated into ApiError.
 * @see ClientApiError
 * @see RpcApiError
 */
class ApiError extends Error {
}
exports.ApiError = ApiError;
/**
 * Api client side error, from user.
 */
class ClientApiError extends ApiError {
    constructor(message) {
        super(`ClientApiError: ${message}`);
    }
}
exports.ClientApiError = ClientApiError;
/**
 * API RPC error, from upstream.
 */
class RpcApiError extends ApiError {
    constructor(error) {
        super(`RpcApiError: '${error.message}', code: ${error.code}, method: ${error.method}`);
        this.payload = error;
    }
}
exports.RpcApiError = RpcApiError;
//# sourceMappingURL=index.js.map