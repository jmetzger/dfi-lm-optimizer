{"mappings":"wEAiCO,IAAMA,aAZb,SAA2BC,GACzB,MAAO,CACLA,IAAKA,EACLC,SAAU,iBCEd,IAAMC,EAA0B,CAC9BC,QAAS,YAsCJ,IAAMC,OAtBb,SAAqBC,EAA6BC,GAChD,IAAMN,EAA0B,iBAAbK,EAAwBA,EAAWA,EAASL,IAE/D,OAAO,IAAIO,EAAcP,EACvBQ,OAAOC,OAAOP,EAAyBI,MAAAA,EAAAA,EAAW,aAiE/C,IAAMI,UAGT,CACFN,OAAAA,OACAL,aAAAA","sources":["./packages/jellyfish/src/provider.ts","./packages/jellyfish/src/index.ts"],"sourcesContent":["/**\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport interface Provider {\n  url: string\n  protocol: string\n}\n\n/**\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport interface HttpProviderConstructor {\n  new (url: string): Provider\n\n  (url: string): Provider\n}\n\n/**\n * @param url to create the HttpProvider\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nfunction initHttpProvider (url: string): Provider {\n  return {\n    url: url,\n    protocol: 'JSON-RPC 1.0'\n  }\n}\n\n/**\n * Initialize a HttpProvider for Jellyfish Client\n *\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport const HttpProvider: HttpProviderConstructor = initHttpProvider as HttpProviderConstructor\n","import { JsonRpcClient } from '@defichain/jellyfish-api-jsonrpc'\nimport { ApiClient } from '@defichain/jellyfish-api-core'\n\nimport { HttpProvider, HttpProviderConstructor, Provider } from './provider'\n\n/**\n * Client options for Jellyfish\n *\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport interface JellyfishOptions {\n  /**\n   * Millis before RPC request is aborted\n   * @default 60000 ms\n   */\n  timeout?: number\n\n  /**\n   * Headers to include in the RPC request\n   */\n  headers?: string[][] | Record<string, string>\n}\n\n/**\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nconst JellyfishOptionsDefault = {\n  timeout: 60000\n}\n\n/**\n * Initialize a jellyfish client\n *\n * @param provider for the client\n * - HttpProvider(url: string)\n * - url: string = defaults to HttpProvider(url)\n *\n * @param options jellyfish client options\n *\n * @constructor\n *\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nfunction initClient (provider: string | Provider, options?: JellyfishOptions): ApiClient {\n  const url = typeof provider === 'string' ? provider : provider.url\n\n  return new JsonRpcClient(url,\n    Object.assign(JellyfishOptionsDefault, options ?? {})\n  )\n}\n\n/**\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\ninterface ClientConstructor {\n  new (provider: string | Provider, options?: JellyfishOptions): ApiClient\n\n  (provider: string | Provider, options?: JellyfishOptions): ApiClient\n}\n\n/**\n * Initialize a Jellyfish Client\n *\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport const Client: ClientConstructor = initClient as ClientConstructor\nexport {\n  HttpProvider\n}\n\n/**\n * MIT License\n *\n * Copyright (c) 2021 DeFiChain Foundation\n * Copyright (c) 2021 DeFi Blockchain Contributors\n * Copyright (c) 2021 DeFi Jellyfish Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n\n * @example <caption>ES6 Modules</caption>\n * import {Client, HttpProvider} from '@defichain/jellyfish'\n * // You can find this in your defi.config file\n * const client = new Client(new HttpProvider(`http://${user}:${password}@127.0.0.1:${port}/`), {\n *   timeout: 30000\n * })\n *\n * @example <caption>ES6 Modules default</caption>\n * import jellyfish from '@defichain/jellyfish'\n * const client = jellyfish.Client(`http://${user}:${password}@127.0.0.1:${port}/`)\n *\n * @example <caption>CommonJS</caption>\n * var jf = require('@defichain/jellyfish')\n * var client1 = jf.Client(`http://${user}:${password}@127.0.0.1:${port}/`)\n *\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport const Jellyfish: {\n  Client: ClientConstructor\n  HttpProvider: HttpProviderConstructor\n} = {\n  Client,\n  HttpProvider\n}\n\n/* eslint-disable import/no-default-export */\n/**\n * @deprecated CJS and UMD bundles has been deprecated, please use individual packages (@defichain/jellyfish-*) for better control of your dependencies.\n */\nexport default Jellyfish\n"],"names":["HttpProvider","url","protocol","JellyfishOptionsDefault","timeout","Client","provider","options","JsonRpcClient","Object","assign","Jellyfish"],"version":3,"file":"index.esm.js.map"}