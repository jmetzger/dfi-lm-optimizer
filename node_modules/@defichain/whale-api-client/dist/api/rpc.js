"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rpc = void 0;
const jellyfish_api_core_1 = require("@defichain/jellyfish-api-core");
const errors_1 = require("../errors");
/**
 * @deprecated since 0.22.x, please use WhaleRpcClient directly
 */
class Rpc {
    constructor(client) {
        this.client = client;
    }
    /**
     * @param {string} method of the RPC method
     * @param {any[]} params to send upstream
     * @param {Precision | PrecisionPath} precision for JSON parsing
     * @throws WhaleApiException instanceof for upstream errors
     * @throws WhaleClientException instanceof for local issues
     * @returns {Promise<T>}
     */
    call(method, params, precision) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = jellyfish_api_core_1.JellyfishJSON.stringify({ params: params });
            const responseRaw = yield this.client.requestAsString('POST', `rpc/${method}`, body);
            const response = jellyfish_api_core_1.JellyfishJSON.parse(responseRaw.body, precision);
            errors_1.raiseIfError(response);
            return response.data;
        });
    }
}
exports.Rpc = Rpc;
