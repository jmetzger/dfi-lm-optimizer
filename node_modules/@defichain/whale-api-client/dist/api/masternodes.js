"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MasternodeState = exports.Masternodes = void 0;
/**
 * DeFi whale endpoint for masternode related services.
 */
class Masternodes {
    constructor(client) {
        this.client = client;
    }
    /**
     * Get list of masternodes.
     *
     * @param {number} size masternodes size to query
     * @param {string} next  set of masternodes to get
     * @return {Promise<ApiPagedResponse<MasternodeData>>}
     */
    list(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'masternodes', size, next);
        });
    }
    /**
     * Get information about a masternode with given id.
     *
     * @param {string} id masternode id to get
     * @return {Promise<MasternodeData>}
     */
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `masternodes/${id}`);
        });
    }
}
exports.Masternodes = Masternodes;
/**
 * Masternode state
 */
var MasternodeState;
(function (MasternodeState) {
    MasternodeState["PRE_ENABLED"] = "PRE_ENABLED";
    MasternodeState["ENABLED"] = "ENABLED";
    MasternodeState["PRE_RESIGNED"] = "PRE_RESIGNED";
    MasternodeState["RESIGNED"] = "RESIGNED";
    MasternodeState["PRE_BANNED"] = "PRE_BANNED";
    MasternodeState["BANNED"] = "BANNED";
    MasternodeState["UNKNOWN"] = "UNKNOWN";
})(MasternodeState = exports.MasternodeState || (exports.MasternodeState = {}));
