import { WhaleApiClient } from '../whale.api.client';
import { ApiPagedResponse } from '../whale.api.response';
import { LoanVaultActive, LoanVaultLiquidated } from './loan';
/**
 * DeFi whale endpoint for address related services.
 */
export declare class Address {
    private readonly client;
    constructor(client: WhaleApiClient);
    /**
     * List account history
     *
     * @param {string} address to list account history
     * @param {string} size of account history
     * @param {string} next set of account history
     * @return {Promise<ApiPagedResponse<AddressHistory>>}
     */
    listAccountHistory(address: string, size?: number, next?: string): Promise<ApiPagedResponse<AddressHistory>>;
    /**
     * Get current balance of an address
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @return {Promise<string>} balance in string
     */
    getBalance(address: string): Promise<string>;
    /**
     * Get current aggregated stats of an address
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @return {Promise<AddressAggregation>}
     */
    getAggregation(address: string): Promise<AddressAggregation>;
    /**
     * List all tokens balance belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size to query
     * @param {number} next token for next slice of AddressToken
     * @return {Promise<ApiPagedResponse<AddressToken>>}
     */
    listToken(address: string, size?: number, next?: string): Promise<ApiPagedResponse<AddressToken>>;
    /**
     * List all vaults belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size of vaults to query
     * @param {string} next set of vaults
     * @return {Promise<ApiPagedResponse<LoanVaultActive | LoanVaultLiquidated>>}
     */
    listVault(address: string, size?: number, next?: string): Promise<ApiPagedResponse<LoanVaultActive | LoanVaultLiquidated>>;
    /**
     * List all transaction activity belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size to query
     * @param {number} next token for next slice of AddressActivity
     * @return {Promise<ApiPagedResponse<AddressActivity>>}
     */
    listTransaction(address: string, size?: number, next?: string): Promise<ApiPagedResponse<AddressActivity>>;
    /**
     * List all unspent belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size to query
     * @param {number} next token for next slice of AddressUnspent
     * @return {Promise<ApiPagedResponse<AddressUnspent>>}
     */
    listTransactionUnspent(address: string, size?: number, next?: string): Promise<ApiPagedResponse<AddressUnspent>>;
}
/**
 * Tokens owned by an address.
 */
export interface AddressToken {
    id: string;
    amount: string;
    symbol: string;
    displaySymbol: string;
    symbolKey: string;
    name: string;
    isDAT: boolean;
    isLPS: boolean;
    isLoanToken: boolean;
}
export interface AddressAggregation {
    id: string;
    hid: string;
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
    script: {
        type: string;
        hex: string;
    };
    statistic: {
        txCount: number;
        txInCount: number;
        txOutCount: number;
    };
    amount: {
        txIn: string;
        txOut: string;
        unspent: string;
    };
}
export interface AddressActivity {
    id: string;
    hid: string;
    type: 'vin' | 'vout';
    typeHex: '00' | '01';
    txid: string;
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
    script: {
        type: string;
        hex: string;
    };
    vin?: {
        txid: string;
        n: number;
    };
    vout?: {
        txid: string;
        n: number;
    };
    value: string;
    tokenId?: number;
}
export interface AddressUnspent {
    id: string;
    hid: string;
    sort: string;
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
    script: {
        type: string;
        hex: string;
    };
    vout: {
        txid: string;
        n: number;
        value: string;
        tokenId?: number;
    };
}
export interface AddressHistory {
    owner: string;
    txid: string;
    txn: number;
    type: string;
    amounts: string[];
    block: {
        height: number;
        hash: string;
        time: number;
    };
}
