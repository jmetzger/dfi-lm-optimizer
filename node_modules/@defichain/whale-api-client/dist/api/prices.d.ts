import { WhaleApiClient } from '../whale.api.client';
import { ApiPagedResponse } from '../whale.api.response';
import { OraclePriceFeed } from './oracles';
/**
 * DeFi whale endpoint for price related services.
 */
export declare class Prices {
    private readonly client;
    constructor(client: WhaleApiClient);
    /**
     * Get a list of PriceTicker
     *
     * @param {number} [size=30] for the number of records per page
     * @param {string} [next] offset for the next page
     * @return {Promise<PriceTicker>}
     */
    list(size?: number, next?: string): Promise<ApiPagedResponse<PriceTicker>>;
    /**
     * Get a PriceTicker
     *
     * @param {string} token symbol for the PriceTicker
     * @param {string} currency fiat currency for the PriceTicker
     * @return {Promise<PriceTicker>}
     */
    get(token: string, currency: string): Promise<PriceTicker>;
    getFeedActive(token: string, currency: string, size?: number, next?: string): Promise<ApiPagedResponse<ActivePrice>>;
    /**
     * Get a list of price feed
     *
     * @param {string} token symbol for the PriceTicker
     * @param {string} currency fiat for the PriceTicker
     * @param {number} [size=30] for number of records per page
     * @param {string} [next] offset for the next page
     * @return {Promise<ApiPagedResponse<PriceFeed>>}
     */
    getFeed(token: string, currency: string, size?: number, next?: string): Promise<ApiPagedResponse<PriceFeed>>;
    /**
     * Get a list of Oracles
     *
     * @param {string} token symbol for the PriceOracle
     * @param {string} currency fiat currency for the PriceOracle
     * @param {number} [size=30] for number of records per page
     * @param {string} [next] offset for the next page
     * @return {Promise<ApiPagedResponse<PriceOracle>>}
     */
    getOracles(token: string, currency: string, size?: number, next?: string): Promise<ApiPagedResponse<PriceOracle>>;
}
export interface PriceTicker {
    id: string;
    sort: string;
    price: PriceFeed;
}
export interface PriceFeed {
    id: string;
    key: string;
    sort: string;
    token: string;
    currency: string;
    aggregated: {
        amount: string;
        weightage: number;
        oracles: {
            active: number;
            total: number;
        };
    };
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
}
export interface PriceOracle {
    id: string;
    key: string;
    token: string;
    currency: string;
    oracleId: string;
    weightage: number;
    /**
     * Optional as OraclePriceFeed might not be available e.g. newly initialized Oracle
     */
    feed?: OraclePriceFeed;
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
}
export interface ActivePrice {
    id: string;
    key: string;
    sort: string;
    active?: {
        amount: string;
        weightage: number;
        oracles: {
            active: number;
            total: number;
        };
    };
    next?: {
        amount: string;
        weightage: number;
        oracles: {
            active: number;
            total: number;
        };
    };
    isLive: boolean;
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
}
