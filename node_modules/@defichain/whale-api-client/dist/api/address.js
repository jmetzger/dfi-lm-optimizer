"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = void 0;
/**
 * DeFi whale endpoint for address related services.
 */
class Address {
    constructor(client) {
        this.client = client;
    }
    /**
     * List account history
     *
     * @param {string} address to list account history
     * @param {string} size of account history
     * @param {string} next set of account history
     * @return {Promise<ApiPagedResponse<AddressHistory>>}
     */
    listAccountHistory(address, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `address/${address}/history`, size, next);
        });
    }
    /**
     * Get current balance of an address
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @return {Promise<string>} balance in string
     */
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `address/${address}/balance`);
        });
    }
    /**
     * Get current aggregated stats of an address
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @return {Promise<AddressAggregation>}
     */
    getAggregation(address) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO(fuxingloh): typing
            return yield this.client.requestData('GET', `address/${address}/aggregation`);
        });
    }
    /**
     * List all tokens balance belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size to query
     * @param {number} next token for next slice of AddressToken
     * @return {Promise<ApiPagedResponse<AddressToken>>}
     */
    listToken(address, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `address/${address}/tokens`, size, next);
        });
    }
    /**
     * List all vaults belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size of vaults to query
     * @param {string} next set of vaults
     * @return {Promise<ApiPagedResponse<LoanVaultActive | LoanVaultLiquidated>>}
     */
    listVault(address, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `address/${address}/vaults`, size, next);
        });
    }
    /**
     * List all transaction activity belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size to query
     * @param {number} next token for next slice of AddressActivity
     * @return {Promise<ApiPagedResponse<AddressActivity>>}
     */
    listTransaction(address, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `address/${address}/transactions`, size, next);
        });
    }
    /**
     * List all unspent belonging to an address.
     *
     * @param {string} address bech32/legacy/b58 formatted address
     * @param {number} size to query
     * @param {number} next token for next slice of AddressUnspent
     * @return {Promise<ApiPagedResponse<AddressUnspent>>}
     */
    listTransactionUnspent(address, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `address/${address}/transactions/unspent`, size, next);
        });
    }
}
exports.Address = Address;
