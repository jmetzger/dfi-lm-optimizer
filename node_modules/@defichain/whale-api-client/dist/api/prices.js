"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prices = void 0;
/**
 * DeFi whale endpoint for price related services.
 */
class Prices {
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of PriceTicker
     *
     * @param {number} [size=30] for the number of records per page
     * @param {string} [next] offset for the next page
     * @return {Promise<PriceTicker>}
     */
    list(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'prices', size, next);
        });
    }
    /**
     * Get a PriceTicker
     *
     * @param {string} token symbol for the PriceTicker
     * @param {string} currency fiat currency for the PriceTicker
     * @return {Promise<PriceTicker>}
     */
    get(token, currency) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `${token}-${currency}`;
            return yield this.client.requestData('GET', `prices/${key}`);
        });
    }
    getFeedActive(token, currency, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `${token}-${currency}`;
            return yield this.client.requestList('GET', `prices/${key}/feed/active`, size, next);
        });
    }
    /**
     * Get a list of price feed
     *
     * @param {string} token symbol for the PriceTicker
     * @param {string} currency fiat for the PriceTicker
     * @param {number} [size=30] for number of records per page
     * @param {string} [next] offset for the next page
     * @return {Promise<ApiPagedResponse<PriceFeed>>}
     */
    getFeed(token, currency, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `${token}-${currency}`;
            return yield this.client.requestList('GET', `prices/${key}/feed`, size, next);
        });
    }
    /**
     * Get a list of Oracles
     *
     * @param {string} token symbol for the PriceOracle
     * @param {string} currency fiat currency for the PriceOracle
     * @param {number} [size=30] for number of records per page
     * @param {string} [next] offset for the next page
     * @return {Promise<ApiPagedResponse<PriceOracle>>}
     */
    getOracles(token, currency, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = `${token}-${currency}`;
            return yield this.client.requestList('GET', `prices/${key}/oracles`, size, next);
        });
    }
}
exports.Prices = Prices;
