"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoanVaultState = exports.Loan = void 0;
class Loan {
    constructor(client) {
        this.client = client;
    }
    /**
     * Paginate query loan schemes.
     *
     * @param {number} size of scheme to query
     * @param {string} next set of schemes
     * @return {Promise<ApiPagedResponse<LoanScheme>>}
     */
    listScheme(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'loans/schemes', size, next);
        });
    }
    /**
     * Get information about a scheme with given scheme id.
     *
     * @param {string} id scheme id to get
     * @return {Promise<LoanScheme>}
     */
    getScheme(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `loans/schemes/${id}`);
        });
    }
    /**
     * Paginate query loan collateral tokens.
     *
     * @param {number} size of collateral tokens to query
     * @param {string} next set of collateral tokens
     * @return {Promise<ApiPagedResponse<CollateralToken>>}
     */
    listCollateralToken(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'loans/collaterals', size, next);
        });
    }
    /**
     * Get information about a collateral token with given collateral token id.
     *
     * @param {string} id collateralToken id to get
     * @return {Promise<CollateralToken>}
     */
    getCollateralToken(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `loans/collaterals/${id}`);
        });
    }
    /**
     * Paginate query loan tokens.
     *
     * @param {number} size of loan token to query
     * @param {string} next set of loan tokens
     * @return {Promise<ApiPagedResponse<LoanToken>>}
     */
    listLoanToken(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'loans/tokens', size, next);
        });
    }
    /**
     * Get information about a loan token with given loan token id.
     *
     * @param {string} id loanToken id to get
     * @return {Promise<LoanToken>}
     */
    getLoanToken(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `loans/tokens/${id}`);
        });
    }
    /**
     * Paginate query loan vaults.
     *
     * @param {number} size of vaults to query
     * @param {string} next set of vaults
     * @return {Promise<ApiPagedResponse<LoanVaultActive | LoanVaultLiquidated>>}
     */
    listVault(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'loans/vaults', size, next);
        });
    }
    /**
     * Get information about a vault with given vault id.
     *
     * @param {string} id vault id to get
     * @return {Promise<LoanVaultActive | LoanVaultLiquidated>}
     */
    getVault(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `loans/vaults/${id}`);
        });
    }
    /**
     * List vault auction history.
     *
     * @param {string} id vaultId
     * @param {number} height liquidation height
     * @param {number} batchIndex batch index
     * @param {number} size of auction batch index history
     * @param {string} next set of auction batch index history
     * @return {Promise<ApiPagedResponse<VaultAuctionBatchHistory>>}
     */
    listVaultAuctionHistory(id, height, batchIndex, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `loans/vaults/${id}/auctions/${height}/batches/${batchIndex}/history`, size, next);
        });
    }
    /**
     * Paginate query loan auctions.
     *
     * @param {number} size of auctions to query
     * @param {string} next set of auctions
     * @return {Promise<ApiPagedResponse<LoanVaultLiquidated>>}
     */
    listAuction(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'loans/auctions', size, next);
        });
    }
}
exports.Loan = Loan;
var LoanVaultState;
(function (LoanVaultState) {
    LoanVaultState["UNKNOWN"] = "UNKNOWN";
    LoanVaultState["ACTIVE"] = "ACTIVE";
    LoanVaultState["FROZEN"] = "FROZEN";
    LoanVaultState["IN_LIQUIDATION"] = "IN_LIQUIDATION";
    LoanVaultState["MAY_LIQUIDATE"] = "MAY_LIQUIDATE";
})(LoanVaultState = exports.LoanVaultState || (exports.LoanVaultState = {}));
