import { WhaleApiClient } from '../whale.api.client';
import { ApiPagedResponse } from '../whale.api.response';
/**
 * DeFi whale endpoint for masternode related services.
 */
export declare class Masternodes {
    private readonly client;
    constructor(client: WhaleApiClient);
    /**
     * Get list of masternodes.
     *
     * @param {number} size masternodes size to query
     * @param {string} next  set of masternodes to get
     * @return {Promise<ApiPagedResponse<MasternodeData>>}
     */
    list(size?: number, next?: string): Promise<ApiPagedResponse<MasternodeData>>;
    /**
     * Get information about a masternode with given id.
     *
     * @param {string} id masternode id to get
     * @return {Promise<MasternodeData>}
     */
    get(id: string): Promise<MasternodeData>;
}
/**
 * Masternode data
 *
 * timelock is the number of weeks the masternode
 * is locked up for
 */
export interface MasternodeData {
    id: string;
    sort: string;
    state: MasternodeState;
    mintedBlocks: number;
    owner: {
        address: string;
    };
    operator: {
        address: string;
    };
    creation: {
        height: number;
    };
    resign?: {
        tx: string;
        height: number;
    };
    timelock: number;
}
/**
 * Masternode state
 */
export declare enum MasternodeState {
    PRE_ENABLED = "PRE_ENABLED",
    ENABLED = "ENABLED",
    PRE_RESIGNED = "PRE_RESIGNED",
    RESIGNED = "RESIGNED",
    PRE_BANNED = "PRE_BANNED",
    BANNED = "BANNED",
    UNKNOWN = "UNKNOWN"
}
