"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blocks = void 0;
class Blocks {
    constructor(client) {
        this.client = client;
    }
    /**
     * @param {number} [size=30] size to query
     * @param {string} [next] next token for next slice of blocks
     * @return {Promise<ApiPagedResponse<Block>>}
     */
    list(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'blocks', size, next);
        });
    }
    /**
     * @param {string} id as hash or height of the block
     * @return {Promise<<Block>}
     */
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `blocks/${id}`);
        });
    }
    /**
     * @param {string} hash of the block
     * @param {number} [size=30] size to query
     * @param {string} [next] next token for next slice of blocks
     * @return {Promise<ApiPagedResponse<Transaction>>}
     */
    getTransactions(hash, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `blocks/${hash}/transactions`, size, next);
        });
    }
}
exports.Blocks = Blocks;
