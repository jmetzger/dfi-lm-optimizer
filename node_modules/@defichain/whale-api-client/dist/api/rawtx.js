"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rawtx = void 0;
/**
 * DeFi whale endpoint for rawtx related services.
 */
class Rawtx {
    constructor(client) {
        this.client = client;
    }
    /**
     * Send a raw transaction
     *
     * @param {RawTxReq} rawTx to submit to the network.
     * @throws WhaleApiException if failed mempool acceptance
     * @returns {Promise<string>} txid
     */
    send(rawTx) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('POST', 'rawtx/send', rawTx);
        });
    }
    /**
     * Send a raw transaction to test the mempool acceptance
     *
     * @param {RawTxReq} rawTx to test mempool acceptance
     * @throws WhaleApiException if failed mempool acceptance
     */
    test(rawTx) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('POST', 'rawtx/test', rawTx);
        });
    }
}
exports.Rawtx = Rawtx;
