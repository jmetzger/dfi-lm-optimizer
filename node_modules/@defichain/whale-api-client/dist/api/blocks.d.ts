import { WhaleApiClient } from '../whale.api.client';
import { ApiPagedResponse } from '../whale.api.response';
import { Transaction } from './transactions';
export declare class Blocks {
    private readonly client;
    constructor(client: WhaleApiClient);
    /**
     * @param {number} [size=30] size to query
     * @param {string} [next] next token for next slice of blocks
     * @return {Promise<ApiPagedResponse<Block>>}
     */
    list(size?: number, next?: string): Promise<ApiPagedResponse<Block>>;
    /**
     * @param {string} id as hash or height of the block
     * @return {Promise<<Block>}
     */
    get(id: string): Promise<Block>;
    /**
     * @param {string} hash of the block
     * @param {number} [size=30] size to query
     * @param {string} [next] next token for next slice of blocks
     * @return {Promise<ApiPagedResponse<Transaction>>}
     */
    getTransactions(hash: string, size?: number, next?: string): Promise<ApiPagedResponse<Transaction>>;
}
/**
 * Information about a block in the best chain.
 */
export interface Block {
    id: string;
    hash: string;
    previousHash: string;
    height: number;
    version: number;
    time: number;
    medianTime: number;
    transactionCount: number;
    difficulty: number;
    masternode: string;
    minter: string;
    minterBlockCount: number;
    reward: string;
    stakeModifier: string;
    merkleroot: string;
    size: number;
    sizeStripped: number;
    weight: number;
}
