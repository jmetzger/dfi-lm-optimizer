import { WhaleApiClient } from '../whale.api.client';
import { ApiPagedResponse } from '../whale.api.response';
/**
 * DeFi whale endpoint for poolpair related services.
 */
export declare class PoolPairs {
    private readonly client;
    constructor(client: WhaleApiClient);
    /**
     * List pool pairs
     *
     * @param {number} size of PoolPairData balance to query
     * @param {string} next set of PoolPairData
     * @return {Promise<ApiPagedResponse<PoolPairData>>}
     */
    list(size?: number, next?: string): Promise<ApiPagedResponse<PoolPairData>>;
    /**
     * Get pool pair
     *
     * @param {string} id
     * @return {Promise<PoolPairData>}
     */
    get(id: string): Promise<PoolPairData>;
    /**
     * List pool swaps
     *
     * @param {string} id poolpair id
     * @param {number} size of PoolSwap to query
     * @param {string} next set of PoolSwap
     * @return {Promise<ApiPagedResponse<PoolSwap>>}
     */
    listPoolSwaps(id: string, size?: number, next?: string): Promise<ApiPagedResponse<PoolSwap>>;
    /**
     * List pool swap aggregates
     *
     * @param {string} id poolpair id
     * @param {PoolSwapAggregatedInterval} interval interval
     * @param {number} size of PoolSwap to query
     * @param {string} next set of PoolSwap
     * @return {Promise<ApiPagedResponse<PoolSwapAggregated>>}
     */
    listPoolSwapAggregates(id: string, interval: PoolSwapAggregatedInterval, size?: number, next?: string): Promise<ApiPagedResponse<PoolSwapAggregated>>;
}
export interface PoolPairData {
    id: string;
    symbol: string;
    displaySymbol: string;
    name: string;
    status: boolean;
    tokenA: {
        id: string;
        symbol: string;
        displaySymbol: string;
        reserve: string;
        blockCommission: string;
    };
    tokenB: {
        id: string;
        symbol: string;
        displaySymbol: string;
        reserve: string;
        blockCommission: string;
    };
    priceRatio: {
        ab: string;
        ba: string;
    };
    commission: string;
    totalLiquidity: {
        token: string;
        usd?: string;
    };
    tradeEnabled: boolean;
    ownerAddress: string;
    rewardPct: string;
    customRewards?: string[];
    creation: {
        tx: string;
        height: number;
    };
    apr?: {
        total: number;
        reward: number;
        commission: number;
    };
    volume?: {
        d30: number;
        h24: number;
    };
}
export interface PoolSwap {
    id: string;
    sort: string;
    txid: string;
    txno: number;
    poolPairId: string;
    fromAmount: string;
    fromTokenId: number;
    block: {
        hash: string;
        height: number;
        time: number;
        medianTime: number;
    };
}
export interface PoolSwapAggregated {
    id: string;
    key: string;
    bucket: number;
    aggregated: {
        amounts: Record<string, string>;
    };
    block: {
        medianTime: number;
    };
}
export declare enum PoolSwapAggregatedInterval {
    ONE_HOUR = 3600,
    ONE_DAY = 86400
}
