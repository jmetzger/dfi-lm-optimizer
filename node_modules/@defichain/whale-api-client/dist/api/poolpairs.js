"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolSwapAggregatedInterval = exports.PoolPairs = void 0;
/**
 * DeFi whale endpoint for poolpair related services.
 */
class PoolPairs {
    constructor(client) {
        this.client = client;
    }
    /**
     * List pool pairs
     *
     * @param {number} size of PoolPairData balance to query
     * @param {string} next set of PoolPairData
     * @return {Promise<ApiPagedResponse<PoolPairData>>}
     */
    list(size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', 'poolpairs', size, next);
        });
    }
    /**
     * Get pool pair
     *
     * @param {string} id
     * @return {Promise<PoolPairData>}
     */
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestData('GET', `poolpairs/${id}`);
        });
    }
    /**
     * List pool swaps
     *
     * @param {string} id poolpair id
     * @param {number} size of PoolSwap to query
     * @param {string} next set of PoolSwap
     * @return {Promise<ApiPagedResponse<PoolSwap>>}
     */
    listPoolSwaps(id, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `poolpairs/${id}/swaps`, size, next);
        });
    }
    /**
     * List pool swap aggregates
     *
     * @param {string} id poolpair id
     * @param {PoolSwapAggregatedInterval} interval interval
     * @param {number} size of PoolSwap to query
     * @param {string} next set of PoolSwap
     * @return {Promise<ApiPagedResponse<PoolSwapAggregated>>}
     */
    listPoolSwapAggregates(id, interval, size = 30, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.requestList('GET', `poolpairs/${id}/swaps/aggregate/${interval}`, size, next);
        });
    }
}
exports.PoolPairs = PoolPairs;
var PoolSwapAggregatedInterval;
(function (PoolSwapAggregatedInterval) {
    PoolSwapAggregatedInterval[PoolSwapAggregatedInterval["ONE_HOUR"] = 3600] = "ONE_HOUR";
    PoolSwapAggregatedInterval[PoolSwapAggregatedInterval["ONE_DAY"] = 86400] = "ONE_DAY";
})(PoolSwapAggregatedInterval = exports.PoolSwapAggregatedInterval || (exports.PoolSwapAggregatedInterval = {}));
