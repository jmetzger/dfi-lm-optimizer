"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiPagedResponse = void 0;
/**
 * ApiPagedResponse class facilitate the ability to pagination query chaining.
 * It extends the Array class and can be accessed like an array, `res[0]`, `res.length`.
 *
 * After accessing all the items in the Array, you can use the same ApiPagedResponse
 * to query the next set of items. Hence allowing you query pagination chaining until you
 * exhaustive all items in the list.
 *
 * @example
 *   let response: ApiPagedResponse = await client.address.listToken(...)
 *   for (const item of response) {
 *     console.log(item)
 *   }
 *
 *   // To query next set of items:
 *   let response = await client.pagination(response)
 *   for (const item of response) {
 *     console.log(item)
 *   }
 */
class ApiPagedResponse extends Array {
    /**
     * @param {WhaleApiResponse} response that holds the data array and next token
     * @param {Method} method of the REST endpoint
     * @param {string} endpoint to paginate query
     */
    constructor(response, method, endpoint) {
        super(...response.data);
        this._paginate = {
            page: response.page,
            method: method,
            endpoint: endpoint
        };
    }
    /**
     * Built-in methods such as map, filter creates a new array for functional programming.
     * It does that with the constructor found in the static Symbol.species class property.
     * This needs to be overridden as ApiPagedResponse constructor has a different signature.
     */
    static get [Symbol.species]() {
        return Array;
    }
    /**
     * @return {string} endpoint to paginate query
     */
    get endpoint() {
        return this._paginate.endpoint;
    }
    /**
     * @return {Method} method of the REST endpoint
     */
    get method() {
        return this._paginate.method;
    }
    /**
     * @return {boolean} whether there a next set of items to paginate
     */
    get hasNext() {
        return this.nextToken !== undefined;
    }
    /**
     * @return {string} next token
     */
    get nextToken() {
        var _a;
        return (_a = this._paginate.page) === null || _a === void 0 ? void 0 : _a.next;
    }
}
exports.ApiPagedResponse = ApiPagedResponse;
