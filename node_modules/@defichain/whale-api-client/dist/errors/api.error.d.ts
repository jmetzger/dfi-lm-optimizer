export declare enum WhaleApiErrorType {
    ValidationError = "ValidationError",
    BadRequest = "BadRequest",
    NotFound = "NotFound",
    Conflict = "Conflict",
    Forbidden = "Forbidden",
    Unauthorized = "Unauthorized",
    BadGateway = "BadGateway",
    TimeoutError = "TimeoutError",
    UnknownError = "UnknownError"
}
export interface WhaleApiError {
    code: number;
    type: WhaleApiErrorType;
    at: number;
    message?: string;
    url?: string;
}
/**
 * Serialized exception from DeFi Whale
 */
export declare class WhaleApiException extends Error {
    readonly error: WhaleApiError;
    constructor(error: WhaleApiError);
    /**
     * @return {number} error code
     */
    get code(): number;
    /**
     * @return {string} error type
     */
    get type(): string;
    /**
     * @return {number} time that error occurred at
     */
    get at(): number;
    /**
     * @return {string} url that threw this endpoint
     */
    get url(): string | undefined;
    static url({ url }: WhaleApiError): string;
    static message({ message }: WhaleApiError): string;
}
