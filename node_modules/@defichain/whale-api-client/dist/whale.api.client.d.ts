import 'url-search-params-polyfill';
import { ApiPagedResponse, WhaleApiResponse } from './whale.api.response';
import { Address } from './api/address';
import { PoolPairs } from './api/poolpairs';
import { Rpc } from './api/rpc';
import { Transactions } from './api/transactions';
import { Tokens } from './api/tokens';
import { Masternodes } from './api/masternodes';
import { Blocks } from './api/blocks';
import { Oracles } from './api/oracles';
import { Prices } from './api/prices';
import { Stats } from './api/stats';
import { Rawtx } from './api/rawtx';
import { Fee } from './api/fee';
import { Loan } from './api/loan';
/**
 * WhaleApiClient Options
 */
export interface WhaleApiClientOptions {
    url: string;
    /**
     * Millis before request is aborted.
     * @default 60000 ms
     */
    timeout?: number;
    /**
     * Version of API
     * `v{major}.{minor}` or `v{major}`
     */
    version?: string;
    /**
     * Network that whale client is configured to
     */
    network?: 'mainnet' | 'testnet' | 'regtest' | string;
}
/**
 * Supported REST Method for DeFi Whale
 */
export declare type Method = 'POST' | 'GET';
export interface ResponseAsString {
    status: number;
    body: string;
}
export declare class WhaleApiClient {
    protected readonly options: WhaleApiClientOptions;
    readonly rpc: Rpc;
    readonly address: Address;
    readonly poolpairs: PoolPairs;
    readonly transactions: Transactions;
    readonly tokens: Tokens;
    readonly masternodes: Masternodes;
    readonly blocks: Blocks;
    readonly oracles: Oracles;
    readonly prices: Prices;
    readonly stats: Stats;
    readonly rawtx: Rawtx;
    readonly fee: Fee;
    readonly loan: Loan;
    constructor(options: WhaleApiClientOptions);
    /**
     * @param {ApiPagedResponse} response from the previous request for pagination chaining
     */
    paginate<T>(response: ApiPagedResponse<T>): Promise<ApiPagedResponse<T>>;
    /**
     * @param {'POST|'GET'} method to request
     * @param {string} path to request
     * @param {number} [size] of the list
     * @param {string} [next] token for pagination
     * @return {ApiPagedResponse} data list in the JSON response body for pagination query
     * @see {paginate(ApiPagedResponse)} for pagination query chaining
     */
    requestList<T>(method: Method, path: string, size: number, next?: string): Promise<ApiPagedResponse<T>>;
    /**
     * @param {'POST|'GET'} method to request
     * @param {string} path to request
     * @param {any} [object] JSON to send in request
     * @return {T} data object in the JSON response body
     */
    requestData<T>(method: Method, path: string, object?: any): Promise<T>;
    /**
     * @param {'POST|'GET'} method to request
     * @param {string} path to request
     * @param {object} [object] JSON to send in request
     * @return {WhaleApiResponse} parsed structured JSON response
     */
    requestAsApiResponse<T>(method: Method, path: string, object?: any): Promise<WhaleApiResponse<T>>;
    /**
     * @param {'POST|'GET'} method to request
     * @param {string} path to request
     * @param {object} [body] in string in request
     * @return {ResponseAsString} as JSON string (RawResponse)
     */
    requestAsString(method: Method, path: string, body?: string): Promise<ResponseAsString>;
}
