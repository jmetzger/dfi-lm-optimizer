"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mining = exports.EstimateMode = void 0;
var EstimateMode;
(function (EstimateMode) {
    EstimateMode["UNSET"] = "UNSET";
    EstimateMode["ECONOMICAL"] = "ECONOMICAL";
    EstimateMode["CONSERVATIVE"] = "CONSERVATIVE";
})(EstimateMode = exports.EstimateMode || (exports.EstimateMode = {}));
/**
 * Mining RPCs for DeFi Blockchain
 */
class Mining {
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the estimated network hashes per second
     *
     * @param {number} nblocks to estimate since last difficulty change.
     * @param {number} height to estimate at the time of the given height.
     * @return {Promise<number>}
     */
    getNetworkHashPerSecond(nblocks = 120, height = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getnetworkhashps', [nblocks, height], 'number');
        });
    }
    /**
     * Get mining-related information
     * @return {Promise<MiningInfo>}
     */
    getMiningInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getmininginfo', [], 'number');
        });
    }
    /**
     *
     * @param {number} confirmationTarget in blocks (1 - 1008)
     * @param {EstimateMode} [estimateMode=EstimateMode.CONSERVATIVE] estimateMode of fees.
     * @returns {Promise<SmartFeeEstimation>}
     */
    estimateSmartFee(confirmationTarget, estimateMode = EstimateMode.CONSERVATIVE) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('estimatesmartfee', [confirmationTarget, estimateMode], 'number');
        });
    }
}
exports.Mining = Mining;
//# sourceMappingURL=mining.js.map