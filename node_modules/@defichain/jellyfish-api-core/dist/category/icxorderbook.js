"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ICXHTLCStatus = exports.ICXHTLCType = exports.ICXOrderType = exports.ICXOrderStatus = exports.ICXOrderBook = void 0;
/**
 * icxorderbook RPCs for DeFi Blockchain
 */
class ICXOrderBook {
    constructor(client) {
        this.client = client;
    }
    /**
     * Create and submits an ICX order creation transaction.
     *
     * @param {ICXOrder} order
     * @param {string} [order.tokenFrom] Symbol or id of selling token
     * @param {string} [order.chainFrom] Symbol or id of selling chain
     * @param {string} [order.chainTo] Symbol or id of buying chain
     * @param {string} [order.tokenTo] Symbol or id of buying token
     * @param {string} [order.ownerAddress] Address of DFI token for fees and selling tokens in case of DFC/BTC order type
     * @param {string} [order.receivePubkey] pubkey which can claim external HTLC in case of EXT/DFC order type
     * @param {BigNumber} order.amountFrom tokenFrom coins amount
     * @param {BigNumber} order.orderPrice Price per unit
     * @param {number} [order.expiry=2880] Number of blocks until the order expires, default 2880 DFI blocks
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object including transaction id of the the result transaction
     */
    createOrder(order, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_createorder', [
                order, utxos
            ], 'bignumber');
        });
    }
    /**
     * Create and submits a makeoffer transaction.
     *
     * @param {ICXOffer} offer
     * @param {string} offer.orderTx Transaction id of the order tx for which is the offer
     * @param {BigNumber} offer.amount Amount fulfilling the order
     * @param {string} offer.ownerAddress Address of DFI token and for receiving tokens in case of EXT/DFC order
     * @param {string} [offer.receivePubkey] Pubkey which can claim external HTLC in case of EXT/DFC order type
     * @param {number} [order.expiry = 10] Number of blocks until the offer expires, default 10 DFI blocks
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object including transaction id of the the transaction
     */
    makeOffer(offer, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_makeoffer', [
                offer, utxos
            ], 'bignumber');
        });
    }
    /**
     * Closes offer transaction.
     *
     * @param {string} offerTx Transaction Id of maker offer
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object including transaction id of the the transaction
     */
    closeOffer(offerTx, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_closeoffer', [
                offerTx, utxos
            ], 'bignumber');
        });
    }
    /**
     * Create and submit a DFC HTLC transaction
     *
     * @param {HTLC} htlc
     * @param {string} htlc.offerTx Transaction Id of the offer transaction for which the HTLC is
     * @param {BigNumber} htlc.amount Amount in HTLC
     * @param {string} htlc.hash Hash of seed used for the hash lock part
     * @param {number} [htlc.timeout] Timeout (absolute in blocks) for expiration of HTLC in DFI blocks
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object including transaction id of the the transaction
     */
    submitDFCHTLC(htlc, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_submitdfchtlc', [
                htlc, utxos
            ], 'bignumber');
        });
    }
    /**
     * Create and submit an external(EXT) HTLC transaction
     *
     * @param {ExtHTLC} htlc
     * @param {string} htlc.offerTx Transaction Id of the offer transaction for which the HTLC is
     * @param {BigNumber} htlc.amount Amount in HTLC
     * @param {string} htlc.htlcScriptAddress Script address of external HTLC
     * @param {string} htlc.hash Hash of seed used for the hash lock part
     * @param {string} htlc.ownerPubkey Pubkey of the owner to which the funds are refunded if HTLC timeouts
     * @param {number} htlc.timeout Timeout (absolute in blocks) for expiration of HTLC in DFI blocks
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object including transaction id of the the transaction
     */
    submitExtHTLC(htlc, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_submitexthtlc', [
                htlc, utxos
            ], 'bignumber');
        });
    }
    /**
     * Claims a DFC HTLC
     *
     * @param {string} DFCHTLCTxId Transaction id of DFC HTLC transaction for which the claim is
     * @param {string} seed Secret seed for claiming HTLC
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object including transaction id of the the transaction
     */
    claimDFCHTLC(DFCHTLCTxId, seed, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const htlc = {
                dfchtlcTx: DFCHTLCTxId,
                seed: seed
            };
            return yield this.client.call('icx_claimdfchtlc', [
                htlc, utxos
            ], 'bignumber');
        });
    }
    /**
     * Closes ICX order
     *
     * @param {string} orderTx Transaction id of maker order
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} utxos.txid transaction Id
     * @param {number} utxos.vout The output number
     * @return {Promise<ICXGenericResult>} Object indluding transaction id of the the transaction
     */
    closeOrder(orderTx, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_closeorder', [
                orderTx, utxos
            ], 'bignumber');
        });
    }
    /**
     * Returns information about order or fillorder
     *
     * @param {string} orderTx Transaction id of createorder or fulfillorder transaction
     * @return {Promise<Record<string, ICXOrderInfo | ICXOfferInfo>>} Object including details of the transaction.
     */
    getOrder(orderTx) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_getorder', [
                orderTx
            ], 'bignumber');
        });
    }
    /**
     * Returns information about orders or fillorders based on ICXListOrderOptions passed
     *
     * @param {ICXListOrderOptions} options
     * @param {string}  [options.token] Token asset
     * @param {string}  [options.chain] Chain asset
     * @param {string}  [options.orderTx] Order txid to list all offers for this order
     * @param {number}  [options.limit = 50] Maximum number of orders to return (default: 50)
     * @param {boolean} [options.closed = false] Display closed orders (default: false)
     * @return {Promise<Record<string, ICXOrderInfo | ICXOfferInfo>>} Object including details of the transaction.
     */
    listOrders(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_listorders', [
                options
            ], 'bignumber');
        });
    }
    /**
     * Returns information about HTLCs based on ICXListHTLCOptions passed
     *
     * @param {ICXListHTLCOptions} options
     * @param {string} options.offerTx Offer txid  for which to list all HTLCS
     * @param {number} [options.limit = 20] Maximum number of orders to return (default: 20)
     * @param {boolean} [options.refunded = false] Display refunded HTLC (default: false)
     * @param {boolean} [options.closed = false] Display claimed HTLCs (default: false)
     * @return {Promise<Record<string, ICXDFCHTLCInfo | ICXEXTHTLCInfo | ICXClaimDFCHTLCInfo>>} Object indluding details of the HTLCS.
     */
    listHTLCs(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('icx_listhtlcs', [
                options
            ], 'bignumber');
        });
    }
}
exports.ICXOrderBook = ICXOrderBook;
var ICXOrderStatus;
(function (ICXOrderStatus) {
    ICXOrderStatus["OPEN"] = "OPEN";
    ICXOrderStatus["CLOSED"] = "CLOSED";
    ICXOrderStatus["FILLED"] = "FILLED";
    ICXOrderStatus["EXPIRED"] = "EXPIRED";
})(ICXOrderStatus = exports.ICXOrderStatus || (exports.ICXOrderStatus = {}));
var ICXOrderType;
(function (ICXOrderType) {
    ICXOrderType["INTERNAL"] = "INTERNAL";
    ICXOrderType["EXTERNAL"] = "EXTERNAL";
})(ICXOrderType = exports.ICXOrderType || (exports.ICXOrderType = {}));
var ICXHTLCType;
(function (ICXHTLCType) {
    ICXHTLCType["CLAIM_DFC"] = "CLAIM DFC";
    ICXHTLCType["DFC"] = "DFC";
    ICXHTLCType["EXTERNAL"] = "EXTERNAL";
})(ICXHTLCType = exports.ICXHTLCType || (exports.ICXHTLCType = {}));
var ICXHTLCStatus;
(function (ICXHTLCStatus) {
    ICXHTLCStatus["OPEN"] = "OPEN";
    ICXHTLCStatus["CLAIMED"] = "CLAIMED";
    ICXHTLCStatus["REFUNDED"] = "REFUNDED";
    ICXHTLCStatus["EXPIRED"] = "EXPIRED";
    ICXHTLCStatus["CLOSED"] = "CLOSED";
})(ICXHTLCStatus = exports.ICXHTLCStatus || (exports.ICXHTLCStatus = {}));
//# sourceMappingURL=icxorderbook.js.map