"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Net = void 0;
/**
 * Net RPCs for DeFi Blockchain
 */
class Net {
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the number of connections to other nodes.
     *
     * @return {Promise<number>}
     */
    getConnectionCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getconnectioncount', [], 'number');
        });
    }
    /**
     * Returns data about each connected network node as a json array of objects.
     *
     * @return {Promise<PeerInfo[]>}
     */
    getPeerInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getpeerinfo', [], 'number');
        });
    }
    /**
     * Returns an object containing various state info regarding P2P networking.
     *
     * @return {Promise<NetworkInfo>}
     */
    getNetworkInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getnetworkinfo', [], 'number');
        });
    }
    /**
     * Disable/enable all p2p network activity.
     *
     * @param state true to enable networking, false to disable
     * @return {Promise<boolean>} current network state
     */
    setNetworkActive(state) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('setnetworkactive', [state], 'number');
        });
    }
}
exports.Net = Net;
//# sourceMappingURL=net.js.map