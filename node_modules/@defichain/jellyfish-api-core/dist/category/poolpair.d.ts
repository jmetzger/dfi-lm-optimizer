import BigNumber from 'bignumber.js';
import { ApiClient } from '..';
/**
 * PoolPair RPCs for DeFi Blockchain
 */
export declare class PoolPair {
    private readonly client;
    constructor(client: ApiClient);
    /**
     * Create a poolpair with given metadata
     *
     * @param {CreatePoolPairMetadata} metadata a data providing information for pool pair creation
     * @param {string} metadata.tokenA uses to trade to obtain tokenB
     * @param {string} metadata.tokenB
     * @param {number} metadata.commission
     * @param {boolean} metadata.status
     * @param {string} metadata.ownerAddress
     * @param {string} [metadata.customRewards]
     * @param {string} [metadata.pairSymbol]
     * @param {UTXO[]} utxos is an array of specific UTXOs to spend
     * @param {string} utxos.txid
     * @param {number} utxos.vout
     * @return {Promise<string>}
     */
    createPoolPair(metadata: CreatePoolPairMetadata, utxos?: UTXO[]): Promise<string>;
    /**
     * Returns information about pools
     *
     * @param {PoolPairPagination} pagination
     * @param {number} pagination.start default is 0
     * @param {boolean} pagination.including_start default = true
     * @param {number} pagination.limit to limit number of records
     * @param {boolean} verbose default = true, otherwise only symbol, name, status, idTokenA, idTokenB
     * @return {Promise<PoolPairsResult>}
     */
    listPoolPairs(pagination?: PoolPairPagination, verbose?: boolean): Promise<PoolPairsResult>;
    /**
     * Returns information about pool
     *
     * @param {string} symbol token's symbol
     * @param {boolean} verbose default = true, otherwise only symbol, name, status, idTokenA, idTokenB
     * @return {Promise<PoolPairsResult>}
     */
    getPoolPair(symbol: string, verbose?: boolean): Promise<PoolPairsResult>;
    /**
     * Add pool liquidity transaction
     *
     * @param {AddPoolLiquiditySource} from pool liquidity sources
     * @param {string | string[]} from[address] provides at least two types of token with format 'amoun@token'
     * @param {string} shareAddress defi address for crediting tokens
     * @param {PoolLiquidityOptions} [options]
     * @param {AddPoolLiquidityUTXO[]} [options.utxos] utxos array of specific UTXOs to spend
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>}
     */
    addPoolLiquidity(from: AddPoolLiquiditySource, shareAddress: string, options?: PoolLiquidityOptions): Promise<string>;
    /**
     * Returns information about pool shares
     *
     * @param {PoolPairPagination} pagination
     * @param {number} pagination.start default is 0
     * @param {boolean} pagination.including_start default = true
     * @param {number} pagination.limit to limit number of records
     * @param {boolean} verbose default = true, otherwise only poolID, owner and %
     * @param {PoolShareOptions} [options]
     * @param {boolean} [options.isMineOnly=true]
     * @return {Promise<PoolSharesResult>}
     */
    listPoolShares(pagination?: PoolPairPagination, verbose?: boolean, options?: PoolShareOptions): Promise<PoolSharesResult>;
    /**
     *  Creates a pool swap transaction with given metadata
     *
     * @param {PoolSwapMetadata} metadata a provided information to create pool swap transaction
     * @param {string} metadata.from address of the owner of tokenFrom
     * @param {string} metadata.tokenFrom swap from token {symbol/id}
     * @param {number} metadata.amountFrom amount from tokenA
     * @param {string} metadata.to address of the owner of tokenTo
     * @param {string} metadata.tokenTo swap to token {symbol/id}
     * @param {number} [metadata.maxPrice] acceptable max price
     * @param {UTXO[]} [utxos = []] array for utxos to spend from.
     * @param {string} [utxos.txid] the transaction id.
     * @param {number} [utxos.vout] the output number.
     * @return {Promise<string>}  hex of performed transaction
     */
    poolSwap(metadata: PoolSwapMetadata, utxos?: UTXO[]): Promise<string>;
    /**
     *  Creates a composite swap (swap between multiple poolpairs) transaction with given metadata.
     *
     * @param {PoolSwapMetadata} metadata a provided information to create pool swap transaction
     * @param {string} metadata.from address of the owner of tokenFrom
     * @param {string} metadata.tokenFrom swap from token {symbol/id}
     * @param {number} metadata.amountFrom amount from tokenFrom
     * @param {string} metadata.to address of the owner of tokenTo
     * @param {string} metadata.tokenTo swap to token {symbol/id}
     * @param {number} [metadata.maxPrice] acceptable max price
     * @param {UTXO[]} [utxos = []] array for utxos to spend from.
     * @param {string} utxos.txid the transaction id.
     * @param {number} utxos.vout the output number.
     * @return {Promise<string>}  hex of performed transaction
     */
    compositeSwap(metadata: PoolSwapMetadata, utxos?: UTXO[]): Promise<string>;
    /**
     * Create a test pool swap transaction to check pool swap's return result
     *
     * @param {PoolSwapMetadata} metadata a provided information to create test pool swap transaction
     * @param {string} metadata.from address of the owner of tokenFrom
     * @param {string} metadata.tokenFrom swap from token {symbol/id}
     * @param {number} metadata.amountFrom amount from tokenA
     * @param {string} metadata.to address of the owner of tokenTo
     * @param {string} metadata.tokenTo swap to token {symbol/id}
     * @param {number} [metadata.maxPrice] acceptable max price
     * @return {Promise<string>} formatted as 'amount@token' swapped
     */
    testPoolSwap(metadata: PoolSwapMetadata): Promise<string>;
    /**
     * Remove pool liquidity transaction
     *
     * @param {string} address defi address for crediting tokens
     * @param {string} poolAccount pool liquidity account of owner
     * @param {PoolLiquidityOptions} [options]
     * @param {UTXO[]} [options.utxos] utxos array of specific UTXOs to spend
     * @param {string} [options.utxos.txid]
     * @param {number} [options.utxos.vout]
     * @return {Promise<string>}
     */
    removePoolLiquidity(address: string, poolAccount: string, options?: PoolLiquidityOptions): Promise<string>;
}
export interface CreatePoolPairMetadata {
    tokenA: string;
    tokenB: string;
    commission: number;
    status: boolean;
    ownerAddress: string;
    customRewards?: string[];
    pairSymbol?: string;
}
export interface UTXO {
    txid: string;
    vout: number;
}
export interface PoolPairsResult {
    [id: string]: PoolPairInfo;
}
export interface PoolPairInfo {
    symbol: string;
    name: string;
    status: boolean;
    idTokenA: string;
    idTokenB: string;
    reserveA: BigNumber;
    reserveB: BigNumber;
    commission: BigNumber;
    totalLiquidity: BigNumber;
    'reserveA/reserveB': BigNumber | string;
    'reserveB/reserveA': BigNumber | string;
    tradeEnabled: boolean;
    ownerAddress: string;
    blockCommissionA: BigNumber;
    blockCommissionB: BigNumber;
    rewardPct: BigNumber;
    customRewards?: string[];
    creationTx: string;
    creationHeight: BigNumber;
}
export interface PoolSharesResult {
    [id: string]: PoolShareInfo;
}
export interface PoolShareInfo {
    poolID: string;
    owner: string;
    '%': BigNumber;
    amount: BigNumber;
    totalLiquidity: BigNumber;
}
export interface PoolPairPagination {
    start: number;
    including_start: boolean;
    limit: number;
}
export interface AddPoolLiquiditySource {
    [address: string]: string | string[];
}
export interface PoolLiquidityOptions {
    utxos?: UTXO[];
}
export interface PoolShareOptions {
    isMineOnly?: boolean;
}
export interface PoolSwapMetadata {
    from: string;
    tokenFrom: string;
    amountFrom: number;
    to: string;
    tokenTo: string;
    maxPrice?: number;
}
//# sourceMappingURL=poolpair.d.ts.map