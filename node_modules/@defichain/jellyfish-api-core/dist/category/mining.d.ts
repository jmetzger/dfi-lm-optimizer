import { ApiClient } from '../.';
export declare enum EstimateMode {
    UNSET = "UNSET",
    ECONOMICAL = "ECONOMICAL",
    CONSERVATIVE = "CONSERVATIVE"
}
/**
 * Mining RPCs for DeFi Blockchain
 */
export declare class Mining {
    private readonly client;
    constructor(client: ApiClient);
    /**
     * Returns the estimated network hashes per second
     *
     * @param {number} nblocks to estimate since last difficulty change.
     * @param {number} height to estimate at the time of the given height.
     * @return {Promise<number>}
     */
    getNetworkHashPerSecond(nblocks?: number, height?: number): Promise<number>;
    /**
     * Get mining-related information
     * @return {Promise<MiningInfo>}
     */
    getMiningInfo(): Promise<MiningInfo>;
    /**
     *
     * @param {number} confirmationTarget in blocks (1 - 1008)
     * @param {EstimateMode} [estimateMode=EstimateMode.CONSERVATIVE] estimateMode of fees.
     * @returns {Promise<SmartFeeEstimation>}
     */
    estimateSmartFee(confirmationTarget: number, estimateMode?: EstimateMode): Promise<SmartFeeEstimation>;
}
/**
 * Minting related information
 */
export interface MintingInfo {
    blocks: number;
    currentblockweight?: number;
    currentblocktx?: number;
    difficulty: string;
    isoperator: boolean;
    masternodeid?: string;
    masternodeoperator?: string;
    masternodestate?: 'PRE_ENABLED' | 'ENABLED' | 'PRE_RESIGNED' | 'RESIGNED' | 'PRE_BANNED' | 'BANNED';
    generate?: boolean;
    mintedblocks?: number;
    networkhashps: number;
    pooledtx: number;
    chain: 'main' | 'test' | 'regtest' | string;
    warnings: string;
}
/**
 * Minting related information
 */
export interface MiningInfo {
    blocks: number;
    currentblockweight?: number;
    currentblocktx?: number;
    difficulty: string;
    isoperator: boolean;
    masternodes: MasternodeInfo[];
    networkhashps: number;
    pooledtx: number;
    chain: 'main' | 'test' | 'regtest' | string;
    warnings: string;
}
/**
 * Masternode related information
 */
export interface MasternodeInfo {
    id: string;
    operator: string;
    state: 'PRE_ENABLED' | 'ENABLED' | 'PRE_RESIGNED' | 'RESIGNED' | 'PRE_BANNED' | 'BANNED';
    generate: boolean;
    mintedblocks: number;
    lastblockcreationattempt: string;
    targetMultiplier: number;
}
export interface SmartFeeEstimation {
    feerate?: number;
    errors?: string[];
    blocks: number;
}
//# sourceMappingURL=mining.d.ts.map